---
title: "About-Docker"
layout: post
date: 2019-03-14 16:29
image: /assets/images/docker.jpg
headerImage: false
tag:
- 도커
- docker
category: blog
author: Kim
description: About Docker
---

## Summary:

도커를 이해하기 위해 필요한 기본 개념 및 도커를 이해해보자.

#### Especial Elements
- [개요](#개요)
- [서버관리자](#서버관리자)
- [도커란?](#도커란)
- [하이퍼바이저란?](#하이퍼바이저란)
- [가상화란?](#가상화란)

---
### 개요
 Docker에 대해 공부 하기 전에 **Docker의 원리를 이해하기 위해 필요한 용어**들 부터 시작해서 **Docker가 왜 나왔고 Docker가 어떻게 사용 되는지** 알아보려고 한다. 여기 내용은 Docker를 이해하기 위해 필요한 전반적으로 얕은 지식들에 대해 서술 해 놓았다. 

---
### 서버관리자
![](https://user-images.githubusercontent.com/23470733/54335885-b430fe00-466d-11e9-823f-ba489ca3dfed.PNG)
 
 구글링을 하다보니 Docker에 대해 필요성을 얘기하는 공통 된 의견은 아래와 같은 상황을 위해 Docker가 필요 한 것 같다.
 - 상황 1 : 당신은 서버에 오라클을 깔아야 한다. 근데 깔아야 할 서버가 300대이다. 근데 50대는 리눅스, 50대는 우분투, 50대는 CentOS, 50대는 윈7, 50대는 윈10, 50대는 맥OS이다.. 각 OS마다 까는방법도 다르고 사용법도 다르고 명령어도 다르다.. 이러한 상황에 Docker는 알맞은 해법이다.

 - 상황 2 : MSA가 대세고, 프로그램은 자꾸 쪼개지고 새로운 툴은 계속나오고 클라우드는 계속 발전하고 있다.

---
### 도커란?
![](https://user-images.githubusercontent.com/23470733/54337759-412a8600-4673-11e9-9fd2-babd3615cf85.PNG)
 
 도커란 컨테이너 기반의 오픈소스 [가상화](#가상화란?) 플랫폼이다.
컨테이너는 내가 생각하는 컨테이너가 맞다. 안에 안들어 가는게 없다. 서버에서 이야기 하는 컨테이너도 비슷하다. 프로그램, 실행환경 등등 컨테이너로 추상화를하고 이미지화 해서 도커 엔진을 통해서 동일한 형태로 올리는 것이다. 그냥 격리 된 환경에서 실행 되는 하나의 프로세스일 뿐이다.

![](https://user-images.githubusercontent.com/23470733/54337923-bd24ce00-4673-11e9-9b70-5849afd3a782.PNG)
 
 기존의 [가상화](#가상화란?) 기술은 [하이퍼바이저](#하이퍼바이저란?)를 이용하여 여러개의 운영체제를 하나의 호스트에서 생성하여 사용하는 기술이다. 하이퍼바이저에 의하여 생성 된 게스트 OS는 다른 게스트O OS와는 분리되어 **독립 된 공간**과 시스템 자원을 달당받아 사용 된다. 시스템 자원을 가상화 하고 독립된 공간을 생성하는 것은 성능의 손실이 발생한다. 
그러나 도커 컨테이너는 가상화 된 공간을 생성하기위해서 프로세사 단위의 **격리환경**을 만들기 때문에 성능 손실이 거의 없다. 컨테이너에 필요한 커널은 호스트 커널을 공유해 사용하고, 컨테이너 안에는 app을 실행하기 위한 라이브러리 및 실행파일만 존재하기 때문에 컨테이너를 이미지로 만들었을 떄 이미지의 용량 또한 가상 머신에 비하여 현저히 작다. 그렇기 떄문에 컨테이너를 이미지로 만들어 배포하는 시간이 가상 머신에 비해서 무척 빠르며, 가상화 된 공간을 사용할 때의 성능손실도 거의 없다는 장점이 있다.
 

---

## 하이퍼바이저란?
![](https://user-images.githubusercontent.com/23470733/54246513-8ae27600-4578-11e9-9032-63fc9c1d26ca.PNG)

물리서버를 [가상화](#가상화란?) 환경으로 만들기 위해서는 하이퍼바이저 기술이 필요하다.
**하이퍼바이저란 호스트 컴퓨터 1대에 여러 운영체제를 동시에 실행 할 수 있도록 해준다.**
하이퍼 바이저는 두가지로 분류 된다.

1) Native ( Bare-metal )
- 하드웨어에 직접 설치되어 이 녀석이 여러개의 OS 를 돌린다.
- 호스트 OS 가 없어 이에 리소스를 할당하지 않아도 된다.
- 호스트형 가상화에 비해 오버헤드가 적고, 물리 컴퓨터 리소스 관리가 유연하다.
- 자체적으로 관리기능을 갖고 있지 않아 별도의 관리콘솔 혹은 관리 컴퓨터가 필요하다는 단점이 있다.

2) Hosted
- 호스트 운영체제에서 실행되며, 이 녀석의 관리하에 운영체제가 관리된다.
- 물리 컴퓨터의 하드웨어를 에뮬레이트하는 방식으로 네이티브, 베어메탈 방식에 비해 오버헤드가 크다.
- 게스트 OS 의 종류에 제약이 적고, 손쉽게 도입이 가능하다는 장점도 있다.

---

## 가상화란?
 가상화란 어떤 하드웨어의 기능을 여러사용자 또는 여러 환경에 배포해서 하드웨어의 성능을 최대한 활용 할 수 있도록 하는 기능이다.

![](https://user-images.githubusercontent.com/23470733/54336302-0de5f800-466f-11e9-9ea0-127e3b3b918d.PNG)
 예를 들면 위에 각각 용도가 있는 OS도 다른(하나는 우분투, 하나는 리눅스, 하나는 MAC OS..로 생각하자 ) 서버가 3대가 있는데, 자원을 30프로만 쓰고 70프로는 쓰지 않고 있다. 그러면 서버 3대에 대해서 70퍼센트의 자원이 사용되지 않고 있기 때문에 매우 비효율 적인데, 가상화 기술을 이용하여 서버 1대에 모든 기능을 다 하도록 할 수 있다.

#### 가상화의 작동원리
 하이퍼바이저라는 소프트웨어가 물리 리소스를 분할하여 가상 환경에서 사용할 수 있도록 한다. 리소스는 필요에 따라 여러 가상환경으로 파티셔닝되고, 사용자가 가상 환경(일반적으로 게스트 머신, 게스트 OS, 가상 머신 모두 같은 말)과 상호 작용하고 가상 환경 내에서 계산을 실행한다. 가상 머신은 단일 데이터 파일과 같이 기능을 한다. 디지털 파일과 같이 한 컴퓨터에서 다른 컴퓨터로 이동할 수 있고 어느 쪽 컴퓨터에서든 열어서 동일 하게 작동 할 수 있다. 
가상 환경이 실행 중이고 사용자 또는 프로그램이 물리 환경에서 추가 리소스를 요구하는 명령을 내리면 하이퍼바이저가 그 요청을 물리 시스템에 전달하고 변경사항을 캐시한다. 이 모든 작업은 네이티브 속도에 가깝게 이루어 진다.

---
출처

1) https://subicura.com/2017/01/19/docker-guide-for-beginners-1.html

2) https://www.redhat.com/ko/topics/virtualization/what-is-virtualization

3) http://avilos.codes/infra-management/virtualization-platform/docker/what-is-docker/

---